#!/usr/bin/env python3
"""
Extraire les vraies URLs de vote depuis oneblock.fr apr√®s avoir cliqu√© sur ENVOYER
"""

import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options

def extract_real_vote_urls():
    chrome_options = Options()
    chrome_options.add_argument("--no-sandbox")
    
    driver = webdriver.Chrome(options=chrome_options)
    
    try:
        print("üåê 1. Acc√®s √† oneblock.fr/vote...")
        driver.get("https://oneblock.fr/vote")
        time.sleep(5)
        
        print("‚úèÔ∏è 2. Remplissage du pseudo...")
        pseudo_field = driver.find_element(By.CSS_SELECTOR, "input[placeholder*='pseudo' i]")
        pseudo_field.clear()
        pseudo_field.send_keys("zCapsLock")
        time.sleep(2)
        
        print("üîò 3. Recherche et clic sur ENVOYER...")
        
        # Chercher le bouton ENVOYER avec plusieurs m√©thodes
        envoyer_btn = None
        
        # M√©thode 1: XPath direct
        xpath_selectors = [
            "//button[contains(text(), 'ENVOYER')]",
            "//button[contains(text(), 'Envoyer')]", 
            "//input[@value='ENVOYER']",
            "//input[@value='Envoyer']"
        ]
        
        for xpath in xpath_selectors:
            try:
                elements = driver.find_elements(By.XPATH, xpath)
                for elem in elements:
                    if elem.is_displayed() and elem.is_enabled():
                        envoyer_btn = elem
                        print(f"   Bouton trouv√©: '{elem.text.strip()}'")
                        break
                if envoyer_btn:
                    break
            except:
                continue
        
        # M√©thode 2: Parcourir tous les boutons
        if not envoyer_btn:
            all_buttons = driver.find_elements(By.TAG_NAME, "button")
            for btn in all_buttons:
                text = btn.text.strip().lower()
                if 'envoyer' in text and btn.is_displayed() and btn.is_enabled():
                    envoyer_btn = btn
                    print(f"   Bouton trouv√© via scan: '{btn.text.strip()}'")
                    break
        
        if not envoyer_btn:
            print("‚ùå Bouton ENVOYER non trouv√©!")
            return
        
        # Cliquer sur le bouton
        try:
            envoyer_btn.click()
            print("‚úÖ Clic normal r√©ussi")
        except Exception as e:
            if "click intercepted" in str(e):
                print("‚ö†Ô∏è Clic intercept√©, utilisation de JavaScript...")
                driver.execute_script("arguments[0].click();", envoyer_btn)
                print("‚úÖ Clic JavaScript r√©ussi")
            else:
                print(f"‚ùå Erreur clic: {e}")
                return
        
        time.sleep(5)
        print("‚úÖ Clic ENVOYER effectu√©")
        
        print("\nüîç 4. EXTRACTION DES VRAIES URLs DE VOTE:")
        
        # Chercher TOUS les liens apr√®s le clic
        all_links = driver.find_elements(By.TAG_NAME, "a")
        print(f"   Total liens trouv√©s: {len(all_links)}")
        
        vote_urls = []
        
        for i, link in enumerate(all_links):
            href = link.get_attribute('href')
            text = link.text.strip()
            visible = link.is_displayed()
            
            if href and visible:
                # Filtrer les liens externes (pas oneblock.fr)
                if 'oneblock.fr' not in href and 'javascript:' not in href and href.startswith('http'):
                    print(f"\n   Lien externe #{len(vote_urls)+1}:")
                    print(f"      Texte: '{text}'")
                    print(f"      URL: {href}")
                    print(f"      Visible: {visible}")
                    
                    # V√©rifier si c'est un lien de vote
                    if any(keyword in text.lower() for keyword in ['vote', 'votez']):
                        print(f"      üéØ LIEN DE VOTE IDENTIFI√â!")
                        vote_urls.append({
                            'text': text,
                            'url': href,
                            'element': link
                        })
        
        print(f"\nüìä R√âSUM√â:")
        print(f"   Liens de vote trouv√©s: {len(vote_urls)}")
        
        # Tester chaque URL de vote
        for i, vote_info in enumerate(vote_urls):
            print(f"\nüß™ Test URL de vote #{i+1}: {vote_info['text']}")
            print(f"   URL: {vote_info['url']}")
            
            try:
                # Ouvrir dans un nouvel onglet pour tester
                driver.execute_script("window.open(arguments[0], '_blank');", vote_info['url'])
                driver.switch_to.window(driver.window_handles[-1])
                time.sleep(5)
                
                current_url = driver.current_url
                title = driver.title
                
                print(f"   URL finale: {current_url}")
                print(f"   Titre: {title}")
                
                # V√©rifier MTCaptcha
                page_source = driver.page_source
                if 'MTPublic-' in page_source:
                    import re
                    sitekey_match = re.search(r'MTPublic-[a-zA-Z0-9]+', page_source)
                    if sitekey_match:
                        print(f"   ‚úÖ SITEKEY TROUV√âE: {sitekey_match.group(0)}")
                
                # V√©rifier champs username
                username_fields = driver.find_elements(By.CSS_SELECTOR, "input[name='username'], input[name='pseudo'], input[placeholder*='pseudo' i]")
                print(f"   Champs username: {len(username_fields)}")
                
                # V√©rifier formulaires de vote
                vote_forms = driver.find_elements(By.TAG_NAME, "form")
                vote_buttons = driver.find_elements(By.XPATH, "//button[contains(text(), 'vote') or contains(text(), 'Vote')] | //input[@type='submit']")
                print(f"   Formulaires: {len(vote_forms)}")
                print(f"   Boutons vote: {len(vote_buttons)}")
                
                # Si on trouve MTCaptcha + username field, c'est probablement bon!
                if 'MTPublic-' in page_source and username_fields:
                    print(f"   üéâ BINGO! Cette URL semble √™tre fonctionnelle pour le vote!")
                
                # Fermer cet onglet et revenir au principal
                driver.close()
                driver.switch_to.window(driver.window_handles[0])
                
            except Exception as e:
                print(f"   ‚ùå Erreur test URL: {e}")
                # S'assurer qu'on est sur le bon onglet
                if len(driver.window_handles) > 1:
                    driver.close()
                    driver.switch_to.window(driver.window_handles[0])
        
        # Si on n'a pas trouv√© de liens de vote, essayer de cliquer sur les boutons d√©sactiv√©s
        if not vote_urls:
            print(f"\nüîÑ Aucun lien de vote trouv√©, test des boutons d√©sactiv√©s...")
            
            site_buttons = driver.find_elements(By.XPATH, "//*[contains(text(), 'SITE N¬∞1') or contains(text(), 'SITE N¬∞2')]")
            
            for i, site_btn in enumerate(site_buttons):
                try:
                    text = site_btn.text.strip()
                    print(f"\n   Test bouton site #{i+1}: '{text[:30]}...'")
                    
                    # Essayer de cliquer m√™me si d√©sactiv√©
                    driver.execute_script("arguments[0].click();", site_btn)
                    time.sleep(3)
                    
                    # V√©rifier si on a √©t√© redirig√©
                    current_url = driver.current_url
                    if 'oneblock.fr' not in current_url:
                        print(f"   ‚úÖ Redirection r√©ussie vers: {current_url}")
                        
                        # Analyser la page
                        if 'MTPublic-' in driver.page_source:
                            print(f"   üéâ Page avec MTCaptcha trouv√©e!")
                    else:
                        print(f"   ‚ö†Ô∏è Pas de redirection")
                        
                except Exception as e:
                    print(f"   ‚ùå Erreur clic bouton: {e}")
        
        print("\n‚è∏Ô∏è Page laiss√©e ouverte pour inspection finale...")
        input("Appuyez sur Entr√©e pour fermer...")
        
    finally:
        driver.quit()

if __name__ == "__main__":
    extract_real_vote_urls()