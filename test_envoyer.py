#!/usr/bin/env python3

from seleniumbase import SB
import time

print("üöÄ Test du bouton ENVOYER...")

with SB(uc=True, headless=False) as sb:
    print("üìç Acc√®s √† oneblock.fr/vote...")
    sb.open("https://oneblock.fr/vote")
    time.sleep(3)
    
    # Accepter cookies si pr√©sents
    try:
        if sb.is_element_visible("button:contains('J'accepte')"):
            sb.click("button:contains('J'accepte')")
            print("‚úÖ Cookies accept√©s")
            time.sleep(1)
    except:
        pass
    
    # Remplir le champ username avec diff√©rentes m√©thodes
    print("\nüîç Remplissage du champ username...")
    
    # M√©thode 1: Par placeholder
    if sb.is_element_present("input[placeholder*='pseudo' i]"):
        sb.type("input[placeholder*='pseudo' i]", "zCapsLock")
        print("‚úÖ Username saisi (par placeholder)")
    # M√©thode 2: Par name
    elif sb.is_element_present("input[name='username']"):
        sb.type("input[name='username']", "zCapsLock")
        print("‚úÖ Username saisi (par name)")
    # M√©thode 3: Premier input visible
    elif sb.is_element_present("input[type='text']"):
        sb.type("input[type='text']", "zCapsLock")
        print("‚úÖ Username saisi (par type)")
    else:
        # M√©thode 4: JavaScript
        sb.execute_script("""
            var inputs = document.querySelectorAll('input');
            for(var inp of inputs) {
                if(inp.type !== 'hidden') {
                    inp.value = 'zCapsLock';
                    inp.dispatchEvent(new Event('input', {bubbles: true}));
                    inp.dispatchEvent(new Event('change', {bubbles: true}));
                    break;
                }
            }
        """)
        print("‚úÖ Username saisi (par JavaScript)")
    
    time.sleep(2)
    
    # Rechercher le bouton ENVOYER avec toutes les m√©thodes possibles
    print("\nüîç Recherche du bouton ENVOYER...")
    
    # Lister tous les boutons d'abord
    buttons = sb.find_elements("button")
    print(f"Nombre de boutons trouv√©s: {len(buttons)}")
    for i, btn in enumerate(buttons):
        text = btn.text.strip()
        classes = btn.get_attribute('class')
        visible = btn.is_displayed()
        print(f"  Bouton {i}: '{text}' | Classes: {classes} | Visible: {visible}")
    
    # Essayer de cliquer sur ENVOYER
    print("\nüéØ Tentative de clic sur ENVOYER...")
    
    # M√©thode 1: Recherche case-insensitive
    for btn in buttons:
        if "ENVOYER" in btn.text.upper() and btn.is_displayed():
            print(f"  ‚Üí Trouv√©: '{btn.text}'")
            try:
                # Scroll vers le bouton
                sb.execute_script("arguments[0].scrollIntoView(true);", btn)
                time.sleep(1)
                # Clic normal
                btn.click()
                print("‚úÖ Clic r√©ussi (m√©thode normale)")
                break
            except Exception as e:
                print(f"‚ùå Clic normal √©chou√©: {e}")
                # Essayer JavaScript
                try:
                    sb.execute_script("arguments[0].click();", btn)
                    print("‚úÖ Clic r√©ussi (JavaScript)")
                    break
                except Exception as e2:
                    print(f"‚ùå Clic JavaScript √©chou√©: {e2}")
    
    time.sleep(3)
    
    # V√©rifier si on est pass√© √† l'√©tape suivante
    print("\nüìç V√©rification apr√®s clic...")
    print(f"URL: {sb.get_current_url()}")
    
    # Chercher les boutons SITE
    if sb.is_element_present("button"):
        buttons = sb.find_elements("button")
        for btn in buttons:
            if "SITE" in btn.text:
                print(f"‚úÖ Bouton de vote trouv√©: {btn.text}")
    
    time.sleep(10)  # Garder ouvert pour observation