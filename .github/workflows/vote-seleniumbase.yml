name: 🗳️ Vote Automation SeleniumBase UC Mode

on:
  workflow_dispatch:  # Test manuel uniquement pour commencer
    inputs:
      test_mode:
        description: 'Mode test (true/false)'
        required: false
        default: 'false'
      use_proxy:
        description: 'Utiliser un proxy (true/false)'
        required: false
        default: 'false'

jobs:
  vote:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-seleniumbase-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-seleniumbase-
    
    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update
        # Installer xvfb pour le display virtuel
        sudo apt-get install -y xvfb
        # Dépendances pour Chrome
        sudo apt-get install -y \
          wget \
          gnupg \
          unzip \
          fonts-liberation \
          libasound2 \
          libatk-bridge2.0-0 \
          libatk1.0-0 \
          libatspi2.0-0 \
          libcups2 \
          libdbus-1-3 \
          libdrm2 \
          libgbm1 \
          libgtk-3-0 \
          libnspr4 \
          libnss3 \
          libxcomposite1 \
          libxdamage1 \
          libxfixes3 \
          libxkbcommon0 \
          libxrandr2 \
          xdg-utils
    
    - name: 🌐 Install Google Chrome
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Vérifier l'installation
        google-chrome --version
    
    - name: 📚 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # Vérifier SeleniumBase
        python -c "import seleniumbase; print(f'SeleniumBase version: {seleniumbase.__version__}')"
    
    - name: 🔑 Create .env file from secrets
      run: |
        echo "api_key=${{ secrets.CAPTCHA_API_KEY }}" > .env
        echo "username=${{ secrets.USERNAME }}" >> .env
        
        # Configuration proxy si activé
        if [ "${{ github.event.inputs.use_proxy }}" = "true" ]; then
          echo "PROXY_HOST=${{ secrets.PROXY_HOST }}" >> .env
          echo "PROXY_PORT=${{ secrets.PROXY_PORT }}" >> .env
          echo "PROXY_USER=${{ secrets.PROXY_USER }}" >> .env
          echo "PROXY_PASS=${{ secrets.PROXY_PASS }}" >> .env
          echo "✅ Configuration proxy ajoutée"
        fi
        
        # Vérifier que les secrets essentiels sont configurés
        if [ -z "${{ secrets.CAPTCHA_API_KEY }}" ]; then
          echo "❌ ERREUR: CAPTCHA_API_KEY non configuré dans les secrets GitHub"
          exit 1
        fi
        
        echo "✅ Fichier .env créé avec succès"
    
    - name: 🖥️ Setup virtual display
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 3
        echo "DISPLAY=:99" >> $GITHUB_ENV
    
    - name: 🗳️ Execute vote script (SeleniumBase)
      run: |
        echo "🚀 Démarrage du vote avec SeleniumBase UC Mode..."
        echo "⏰ Heure actuelle: $(date)"
        echo "🌍 Timezone: $TZ"
        echo "🖥️ Display: $DISPLAY"
        
        # Lancer le script avec retry automatique
        for attempt in {1..3}; do
          echo "🔄 Tentative $attempt/3..."
          
          if python3 mtcaptcha_seleniumbase.py --headless; then
            echo "🎉 Vote réussi à la tentative $attempt"
            echo "VOTE_SUCCESS=true" >> $GITHUB_ENV
            break
          else
            echo "❌ Échec à la tentative $attempt"
            if [ $attempt -lt 3 ]; then
              echo "⏳ Attente de 30 secondes avant la prochaine tentative..."
              sleep 30
            else
              echo "💥 Toutes les tentatives ont échoué"
              echo "VOTE_SUCCESS=false" >> $GITHUB_ENV
              exit 1
            fi
          fi
        done
      env:
        DISPLAY: ':99'
        PYTHONUNBUFFERED: '1'
    
    - name: 📊 Job Summary
      if: always()
      run: |
        echo "## 🗳️ Vote Automation Summary (SeleniumBase)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Date/Heure**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Résultat**: ${{ env.VOTE_SUCCESS == 'true' && '✅ Succès' || '❌ Échec' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Mode**: SeleniumBase UC Mode" >> $GITHUB_STEP_SUMMARY
        echo "- **Proxy**: ${{ github.event.inputs.use_proxy == 'true' && '✅ Activé' || '❌ Désactivé' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Runner**: ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ env.VOTE_SUCCESS }}" = "true" ]; then
          echo "- **Status**: 🎉 Vote effectué avec succès" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status**: ⚠️ Vote échoué - vérifier les logs" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: 📸 Upload screenshots on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: vote-failure-seleniumbase-${{ github.run_number }}
        path: |
          *.log
          screenshots/
        retention-days: 7