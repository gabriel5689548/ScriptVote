name: üó≥Ô∏è Vote Automation 24/7

on:
  schedule:
    # Vote 24/7 toutes les 1h30 (16 votes par jour)
    # Utilise environ 2400 minutes/mois sur les 3000 disponibles avec GitHub Pro
    - cron: '0 0 * * *'     # 00h00
    - cron: '30 1 * * *'    # 01h30  
    - cron: '0 3 * * *'     # 03h00
    - cron: '30 4 * * *'    # 04h30
    - cron: '0 6 * * *'     # 06h00
    - cron: '30 7 * * *'    # 07h30
    - cron: '0 9 * * *'     # 09h00
    - cron: '30 10 * * *'   # 10h30
    - cron: '0 12 * * *'    # 12h00
    - cron: '30 13 * * *'   # 13h30
    - cron: '0 15 * * *'    # 15h00
    - cron: '30 16 * * *'   # 16h30
    - cron: '0 18 * * *'    # 18h00
    - cron: '30 19 * * *'   # 19h30
    - cron: '0 21 * * *'    # 21h00
    - cron: '30 22 * * *'   # 22h30
  
  workflow_dispatch:  # Permet de d√©clencher manuellement pour les tests
    inputs:
      test_mode:
        description: 'Mode test (true/false)'
        required: false
        default: 'false'

jobs:
  vote:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Limite de s√©curit√© pour √©viter les blocages
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
    
    - name: üêç Setup Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: üì¶ Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: üîß Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip xvfb
    
    - name: üåê Install Google Chrome
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # V√©rifier l'installation
        google-chrome --version
    
    - name: üöó Install ChromeDriver
      run: |
        # Obtenir la version de Chrome install√©e
        CHROME_VERSION=$(google-chrome --version | cut -d " " -f3 | cut -d "." -f1)
        echo "Chrome major version: $CHROME_VERSION"
        
        # Utiliser la nouvelle API Chrome for Testing
        CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json" | \
          jq -r ".versions[] | select(.version | startswith(\"$CHROME_VERSION.\")) | .downloads.chromedriver[] | select(.platform == \"linux64\") | .url" | tail -1)
        
        echo "ChromeDriver URL: $CHROMEDRIVER_URL"
        
        # T√©l√©charger et installer ChromeDriver
        wget -O /tmp/chromedriver.zip "$CHROMEDRIVER_URL"
        sudo unzip /tmp/chromedriver.zip -d /tmp/
        sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        
        # V√©rifier l'installation
        chromedriver --version
    
    - name: üìö Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: üîë Create .env file from secrets
      run: |
        echo "api_key=${{ secrets.CAPTCHA_API_KEY }}" > .env
        echo "username=${{ secrets.USERNAME }}" >> .env
        
        # V√©rifier que les secrets sont bien configur√©s
        if [ -z "${{ secrets.CAPTCHA_API_KEY }}" ]; then
          echo "‚ùå ERREUR: CAPTCHA_API_KEY non configur√© dans les secrets GitHub"
          exit 1
        fi
        
        echo "‚úÖ Fichier .env cr√©√© avec succ√®s"
    
    - name: üó≥Ô∏è Execute vote script
      run: |
        echo "üöÄ D√©marrage du vote automatique..."
        echo "‚è∞ Heure actuelle: $(date)"
        echo "üåç Timezone: $TZ"
        
        # Lancer le script avec retry automatique
        for attempt in {1..3}; do
          echo "üîÑ Tentative $attempt/3..."
          
          if python3 mtcaptcha_github_actions.py --headless; then
            echo "üéâ Vote r√©ussi √† la tentative $attempt"
            echo "VOTE_SUCCESS=true" >> $GITHUB_ENV
            break
          else
            echo "‚ùå √âchec √† la tentative $attempt"
            if [ $attempt -lt 3 ]; then
              echo "‚è≥ Attente de 30 secondes avant la prochaine tentative..."
              sleep 30
            else
              echo "üí• Toutes les tentatives ont √©chou√©"
              echo "VOTE_SUCCESS=false" >> $GITHUB_ENV
              exit 1
            fi
          fi
        done
      env:
        DISPLAY: ':99'
        PYTHONUNBUFFERED: '1'
    
    - name: üìä Job Summary
      if: always()
      run: |
        echo "## üó≥Ô∏è Vote Automation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Date/Heure**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **R√©sultat**: ${{ env.VOTE_SUCCESS == 'true' && '‚úÖ Succ√®s' || '‚ùå √âchec' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Runner**: ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ env.VOTE_SUCCESS }}" = "true" ]; then
          echo "- **Status**: üéâ Vote effectu√© avec succ√®s" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status**: ‚ö†Ô∏è Vote √©chou√© - v√©rifier les logs" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: üì∏ Upload screenshots on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: vote-failure-${{ github.run_number }}
        path: |
          *.log
          screenshots/
        retention-days: 7
    
    - name: üîî Notify on failure (optionnel)
      if: failure()
      run: |
        if [ -n "${{ secrets.DISCORD_WEBHOOK }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"content\":\"‚ùå Vote automation failed at $(date)\\nWorkflow: ${{ github.workflow }}\\nRun: ${{ github.run_id }}\"}" \
          ${{ secrets.DISCORD_WEBHOOK }}
        fi