#!/usr/bin/env python3
"""
Test direct d'acc√®s au site de vote sans passer par oneblock.fr
Pour voir si le vote direct fonctionne
"""

import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options

def test_direct_vote():
    chrome_options = Options()
    chrome_options.add_argument("--no-sandbox")
    
    driver = webdriver.Chrome(options=chrome_options)
    
    try:
        # Test 1: Acc√®s direct √† l'URL de vote
        vote_url = "https://serveur-prive.net/oneblockbyrivrs/vote"
        print(f"üåê Test 1: Acc√®s direct √† {vote_url}")
        driver.get(vote_url)
        time.sleep(5)
        
        # V√©rifier si on arrive sur la page de vote
        current_url = driver.current_url
        print(f"   URL actuelle: {current_url}")
        
        # Chercher des √©l√©ments de captcha
        mtcaptcha_elements = driver.find_elements(By.XPATH, "//*[contains(@class, 'mtcaptcha') or contains(@data-sitekey, 'MT')]")
        print(f"   √âl√©ments MTCaptcha trouv√©s: {len(mtcaptcha_elements)}")
        
        # Chercher des champs de vote
        vote_elements = driver.find_elements(By.XPATH, "//*[contains(text(), 'vote') or contains(text(), 'Vote')]")
        print(f"   √âl√©ments de vote trouv√©s: {len(vote_elements)}")
        
        # Chercher des champs username/pseudo
        username_fields = driver.find_elements(By.CSS_SELECTOR, "input[name='username'], input[name='pseudo'], input[placeholder*='pseudo' i]")
        print(f"   Champs username/pseudo trouv√©s: {len(username_fields)}")
        
        for i, field in enumerate(username_fields):
            name = field.get_attribute('name')
            placeholder = field.get_attribute('placeholder')
            print(f"      Champ {i+1}: name='{name}', placeholder='{placeholder}'")
        
        # Test 2: Si √ßa fonctionne, tester avec oneblock.fr en referrer
        print(f"\nüåê Test 2: Acc√®s avec referrer oneblock.fr")
        driver.execute_script(f"window.location.href = '{vote_url}'; document.referrer = 'https://oneblock.fr/vote';")
        time.sleep(5)
        
        current_url2 = driver.current_url
        print(f"   URL apr√®s referrer: {current_url2}")
        
        # Test 3: V√©rifier les cookies oneblock.fr
        print(f"\nüåê Test 3: V√©rification des cookies")
        driver.get("https://oneblock.fr")
        time.sleep(3)
        
        cookies = driver.get_cookies()
        print(f"   Cookies oneblock.fr: {len(cookies)}")
        for cookie in cookies:
            print(f"      {cookie['name']}: {cookie['value'][:50]}...")
        
        # Maintenant retester l'acc√®s au vote
        print(f"\nüåê Test 4: Acc√®s au vote apr√®s visite oneblock.fr")
        driver.get(vote_url)
        time.sleep(5)
        
        current_url3 = driver.current_url
        print(f"   URL finale: {current_url3}")
        
        # Analyser la page finale
        print(f"\nüîç ANALYSE PAGE FINALE:")
        
        # Chercher MTCaptcha sitekey
        page_source = driver.page_source
        if 'MTPublic-' in page_source:
            import re
            sitekey_match = re.search(r'MTPublic-[a-zA-Z0-9]+', page_source)
            if sitekey_match:
                print(f"   ‚úÖ Sitekey MTCaptcha trouv√©e: {sitekey_match.group(0)}")
        
        # Chercher formulaires
        forms = driver.find_elements(By.TAG_NAME, "form")
        print(f"   Formulaires trouv√©s: {len(forms)}")
        
        # Chercher boutons de vote
        vote_buttons = driver.find_elements(By.XPATH, "//button[contains(text(), 'vote') or contains(text(), 'Vote')] | //input[@type='submit']")
        print(f"   Boutons de vote: {len(vote_buttons)}")
        
        for i, btn in enumerate(vote_buttons):
            text = btn.text or btn.get_attribute('value')
            print(f"      Bouton {i+1}: '{text}'")
        
        print("\n‚è∏Ô∏è Page laiss√©e ouverte pour inspection...")
        input("Appuyez sur Entr√©e pour fermer...")
        
    finally:
        driver.quit()

if __name__ == "__main__":
    test_direct_vote()